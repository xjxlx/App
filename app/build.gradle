plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'bugly'
}

bugly {
    appId = '09c9b19788' // 注册时分配的App ID
    appKey = 'ad72f7ba-8124-45a9-9ac7-755bc698be19' // 注册时分配的App Key
}

def configCompile = rootProject.ext.android
def configDependencies = rootProject.ext.dependencies

android {
    compileSdkVersion configCompile.compileSdkVersion
    buildToolsVersion configCompile.buildToolsVersion

    defaultConfig {
        applicationId "com.android.app"
        minSdkVersion configCompile.minSdkVersion
        targetSdkVersion configCompile.targetSdkVersion
        versionCode configCompile.versionCode
        versionName configCompile.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //指定room.schemaLocation生成的文件路径
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }

        //  buildConfigField("String", "APP_ID", project.APP_ID)
        //  buildConfigField("int", "SQLite_Version_Code", project.SQLiteVersionCode)
        //  buildConfigField("boolean", "APP_DEBUG", "false")
        //  project.extensions.findByName('android')?.defaultConfig?.buildConfigField("boolean", "APP_DEBUG", "false")
        buildConfigField("int", "ROOM_VERSION", "1")
        buildConfigField("String", "ROOM_VERSION_FILE_NAME", "\"room_table.db\"")

        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi', 'x86', 'arm64-v8a' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }

        // 设置默认的维度
        flavorDimensions "default"
    }

    signingConfigs {
        test {
            storeFile file('../jks/apphelper.jks')
            storePassword '123456'
            keyPassword '123456'
            keyAlias 'apphelper'
        }

        config {
            storeFile file('../jks/apphelper.jks')
            storePassword '123456'
            keyAlias 'apphelper'
            keyPassword '123456'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.config
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            // 给applicationId添加后缀“.debug”
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.test
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {//目录指向配置
        main {
            jniLibs.srcDirs = ['libs']
            jni {
                srcDirs 'src\\main\\jni'
            }//指定lib库目录
        }
    }

    buildFeatures {
        viewBinding = true
    }

    //程序在编译的时候会检查lint，有任何错误提示会停止build，我们可以关闭这个开关
    lintOptions {
        abortOnError false //即使报错也不会停止打包
        checkReleaseBuilds false  //打包release版本的时候进行检测
    }

    productFlavors {
        // 免费版
        free {
            applicationId "com.android.app.free"
            // 定义app_icon字段，在AndroidManifest.xml文件中用到
            manifestPlaceholders = [
                    channel_value: "free",
                    app_icon     : "@mipmap/ic_launcher"
            ]
            // versionName "1.0.0"
            // versionCode 1
            // 自动生成@string/app_name为App小助手Free
            resValue "string", "app_name", "App小助手Free"
        }

        // 收费版
        pro {
            applicationId "com.android.app.pro"
            // 定义app_icon字段，在AndroidManifest.xml文件中用到
            manifestPlaceholders = [
                    channel_value: "pro",
                    app_icon     : "@mipmap/ic_launcher_round"
            ]
            // versionName "2.0.0"
            // versionCode 2
            // 自动生成@string/app_name为App小助手pro
            resValue "string", "app_name", "App小助手pro"

            //  buildConfigField("String","CHANNEL","\"huawei\"")
        }

        // 教育版
        education {
            applicationId "com.android.app.education"
            // 定义app_icon字段，在AndroidManifest.xml文件中用到
            manifestPlaceholders = [
                    channel_value: "education",
                    app_icon     : "@mipmap/ic_launcher_foreground"
            ]
            // versionName "2.0.0"
            // versionCode 2
            // 自动生成@string/app_name为App小助手education
            resValue "string", "app_name", "App小助手education"
        }
    }

//    productFlavors.all {
//        flavor -> flavor.manifestPlaceholders = [channel_value: name]
//    }

    //这里修改apk文件名
    android.applicationVariants.all { variant ->
        //判断是release还是debug版本
        def buildType = variant.buildType.name
        variant.outputs.all {
            if (buildType == "release") {
                // 获取渠道名字
                def productFlavors = productFlavors.name
                println "${"productFlavors:" + productFlavors}"
                // 设置文件夹名字 = 项目目录 + outputs + release + 渠道名字
                def file = new File(project.rootDir.absolutePath + File.separator + "outputs" + File.separator + "release" + File.separator + productFlavors)
                variant.getPackageApplicationProvider().get().outputDirectory = file
                // 文件名字 =  AppHelper-v + 版本名字 + 渠道名字 + 当前时间
                outputFileName = "AppHelper-v${variant.versionName}${productFlavors}-${releaseTime()}.apk"
            }
        }
    }

    // ndk version
    ndkVersion = "21.4.7075529"
}

// 显示的时间格式，形如20171110
static def releaseTime() {
    return new Date().format("yyyy-MM-dd HH-mm", TimeZone.getDefault());
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation files('libs/nineoldandroids-2.4.0.jar')
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    //  implementation 'com.github.xjxlx:App:2.3.2'
    implementation project(path: ':apphelper')
    implementation project(path: ':apphelper2')
    implementation 'com.github.xjxlx:dimens:1.3.0'
    implementation 'com.github.xjxlx:photo:1.3.0'

    implementation configDependencies["room-runtime"]
    implementation configDependencies["room-ktx"]
    implementation configDependencies["room-rxjava2"]

    // 如果使用kotlin："kapt"  如果不使用kotlin:"annotationProcessor"
    kapt configDependencies["room-compiler"]

    // navigation
    def nav_version = "2.3.5"
    //noinspection GradleDependency
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    //noinspection GradleDependency
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'com.google.android:flexbox:1.1.1' // 流式布局

    // implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.4'
    implementation 'com.squareup.okhttp3:mockwebserver:5.0.0-alpha.2'

    // bugly
    implementation 'com.tencent.bugly:crashreport:3.4.4'
    implementation 'com.tencent.bugly:nativecrashreport:3.9.2'

    // 高德
    implementation 'com.amap.api:location:5.6.1' // 定位
    implementation 'com.amap.api:search:8.1.0' // 搜索
    implementation 'com.amap.api:3dmap:8.1.0' // 地图
    implementation 'org.greenrobot:eventbus:3.2.0'
    implementation "androidx.room:room-runtime:2.4.2"

    // 高德
    implementation 'com.amap.api:location:5.6.1' // 定位
    implementation 'com.amap.api:search:8.1.0' // 搜索
    implementation 'com.amap.api:3dmap:8.1.0' // 地图
}